// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/marketplace/arts.proto

package marketplace

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CreateArtRequest struct {
	Name                 string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AssetId              int64              `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Description          *types.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	YoutubeLink          *types.StringValue `protobuf:"bytes,4,opt,name=youtube_link,json=youtubeLink,proto3" json:"youtube_link,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CreateArtRequest) Reset()         { *m = CreateArtRequest{} }
func (m *CreateArtRequest) String() string { return proto.CompactTextString(m) }
func (*CreateArtRequest) ProtoMessage()    {}
func (*CreateArtRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_95656e0ee5f60ee7, []int{0}
}
func (m *CreateArtRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateArtRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateArtRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateArtRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateArtRequest.Merge(m, src)
}
func (m *CreateArtRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateArtRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateArtRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateArtRequest proto.InternalMessageInfo

func (m *CreateArtRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateArtRequest) GetAssetId() int64 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

func (m *CreateArtRequest) GetDescription() *types.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *CreateArtRequest) GetYoutubeLink() *types.StringValue {
	if m != nil {
		return m.YoutubeLink
	}
	return nil
}

func (*CreateArtRequest) XXX_MessageName() string {
	return "marketplace.api.v1.marketplace.CreateArtRequest"
}

type ArtResponse struct {
	Id                   int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string         `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Asset                *AssetResponse `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ArtResponse) Reset()         { *m = ArtResponse{} }
func (m *ArtResponse) String() string { return proto.CompactTextString(m) }
func (*ArtResponse) ProtoMessage()    {}
func (*ArtResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_95656e0ee5f60ee7, []int{1}
}
func (m *ArtResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArtResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArtResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArtResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArtResponse.Merge(m, src)
}
func (m *ArtResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArtResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArtResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArtResponse proto.InternalMessageInfo

func (m *ArtResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ArtResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ArtResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ArtResponse) GetAsset() *AssetResponse {
	if m != nil {
		return m.Asset
	}
	return nil
}

func (*ArtResponse) XXX_MessageName() string {
	return "marketplace.api.v1.marketplace.ArtResponse"
}

type ArtRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArtRequest) Reset()         { *m = ArtRequest{} }
func (m *ArtRequest) String() string { return proto.CompactTextString(m) }
func (*ArtRequest) ProtoMessage()    {}
func (*ArtRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_95656e0ee5f60ee7, []int{2}
}
func (m *ArtRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArtRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArtRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArtRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArtRequest.Merge(m, src)
}
func (m *ArtRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArtRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArtRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArtRequest proto.InternalMessageInfo

func (m *ArtRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (*ArtRequest) XXX_MessageName() string {
	return "marketplace.api.v1.marketplace.ArtRequest"
}

type ArtsRequest struct {
	Offset               uint64   `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                uint64   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArtsRequest) Reset()         { *m = ArtsRequest{} }
func (m *ArtsRequest) String() string { return proto.CompactTextString(m) }
func (*ArtsRequest) ProtoMessage()    {}
func (*ArtsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_95656e0ee5f60ee7, []int{3}
}
func (m *ArtsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArtsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArtsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArtsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArtsRequest.Merge(m, src)
}
func (m *ArtsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArtsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArtsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArtsRequest proto.InternalMessageInfo

func (m *ArtsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ArtsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (*ArtsRequest) XXX_MessageName() string {
	return "marketplace.api.v1.marketplace.ArtsRequest"
}

type ArtsResponse struct {
	Items                []*ArtResponse `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	TotalCount           int64          `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Count                int64          `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Prev                 bool           `protobuf:"varint,4,opt,name=prev,proto3" json:"prev,omitempty"`
	Next                 bool           `protobuf:"varint,5,opt,name=next,proto3" json:"next,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ArtsResponse) Reset()         { *m = ArtsResponse{} }
func (m *ArtsResponse) String() string { return proto.CompactTextString(m) }
func (*ArtsResponse) ProtoMessage()    {}
func (*ArtsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_95656e0ee5f60ee7, []int{4}
}
func (m *ArtsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArtsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArtsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArtsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArtsResponse.Merge(m, src)
}
func (m *ArtsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArtsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArtsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArtsResponse proto.InternalMessageInfo

func (m *ArtsResponse) GetItems() []*ArtResponse {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ArtsResponse) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ArtsResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ArtsResponse) GetPrev() bool {
	if m != nil {
		return m.Prev
	}
	return false
}

func (m *ArtsResponse) GetNext() bool {
	if m != nil {
		return m.Next
	}
	return false
}

func (*ArtsResponse) XXX_MessageName() string {
	return "marketplace.api.v1.marketplace.ArtsResponse"
}
func init() {
	proto.RegisterType((*CreateArtRequest)(nil), "marketplace.api.v1.marketplace.CreateArtRequest")
	golang_proto.RegisterType((*CreateArtRequest)(nil), "marketplace.api.v1.marketplace.CreateArtRequest")
	proto.RegisterType((*ArtResponse)(nil), "marketplace.api.v1.marketplace.ArtResponse")
	golang_proto.RegisterType((*ArtResponse)(nil), "marketplace.api.v1.marketplace.ArtResponse")
	proto.RegisterType((*ArtRequest)(nil), "marketplace.api.v1.marketplace.ArtRequest")
	golang_proto.RegisterType((*ArtRequest)(nil), "marketplace.api.v1.marketplace.ArtRequest")
	proto.RegisterType((*ArtsRequest)(nil), "marketplace.api.v1.marketplace.ArtsRequest")
	golang_proto.RegisterType((*ArtsRequest)(nil), "marketplace.api.v1.marketplace.ArtsRequest")
	proto.RegisterType((*ArtsResponse)(nil), "marketplace.api.v1.marketplace.ArtsResponse")
	golang_proto.RegisterType((*ArtsResponse)(nil), "marketplace.api.v1.marketplace.ArtsResponse")
}

func init() { proto.RegisterFile("api/v1/marketplace/arts.proto", fileDescriptor_95656e0ee5f60ee7) }
func init() {
	golang_proto.RegisterFile("api/v1/marketplace/arts.proto", fileDescriptor_95656e0ee5f60ee7)
}

var fileDescriptor_95656e0ee5f60ee7 = []byte{
	// 453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0xe5, 0xa6, 0x5d, 0x76, 0x9d, 0x15, 0x42, 0x16, 0x42, 0x61, 0xb5, 0x64, 0x43, 0x4e,
	0x95, 0xd0, 0x3a, 0xda, 0xe5, 0x88, 0x04, 0x2a, 0x3d, 0x21, 0x71, 0x32, 0x12, 0x07, 0x2e, 0x95,
	0xdb, 0x4c, 0x83, 0xd5, 0x24, 0x36, 0xb6, 0x53, 0xe0, 0x4d, 0x78, 0x0c, 0x1e, 0x01, 0x71, 0xda,
	0x23, 0x8f, 0x80, 0xba, 0x2f, 0x82, 0x32, 0x49, 0x21, 0xfc, 0x11, 0x70, 0x9b, 0x6f, 0x3c, 0x5f,
	0xf2, 0xfb, 0x66, 0xe8, 0x3d, 0x69, 0x54, 0xb6, 0xbd, 0xc8, 0x2a, 0x69, 0x37, 0xe0, 0x4d, 0x29,
	0x57, 0x90, 0x49, 0xeb, 0x1d, 0x37, 0x56, 0x7b, 0xcd, 0xe2, 0x41, 0x9f, 0x4b, 0xa3, 0xf8, 0xf6,
	0x82, 0x0f, 0x5a, 0x27, 0x71, 0xa1, 0x75, 0x51, 0x42, 0x86, 0xd3, 0xcb, 0x66, 0x9d, 0xbd, 0xb5,
	0xd2, 0x18, 0xb0, 0xbd, 0xff, 0xe4, 0xbc, 0x50, 0xfe, 0x75, 0xb3, 0xe4, 0x2b, 0x5d, 0x65, 0x85,
	0x2e, 0xf4, 0x8f, 0xc1, 0x56, 0xa1, 0xc0, 0xaa, 0x1f, 0x3f, 0xfb, 0x13, 0x8d, 0x73, 0xb0, 0xe7,
	0x49, 0x3f, 0x13, 0x7a, 0x6b, 0x6e, 0x41, 0x7a, 0x98, 0x59, 0x2f, 0xe0, 0x4d, 0x03, 0xce, 0x33,
	0x46, 0xc7, 0xb5, 0xac, 0x20, 0x22, 0x09, 0x99, 0x1e, 0x09, 0xac, 0xd9, 0x5d, 0x7a, 0x88, 0xc6,
	0x85, 0xca, 0xa3, 0x51, 0x42, 0xa6, 0x81, 0xb8, 0x81, 0xfa, 0x59, 0xce, 0x1e, 0xd3, 0x30, 0x07,
	0xb7, 0xb2, 0xca, 0x78, 0xa5, 0xeb, 0x28, 0x48, 0xc8, 0x34, 0xbc, 0x3c, 0xe5, 0x5d, 0x12, 0xbe,
	0x07, 0xe4, 0x2f, 0xbc, 0x55, 0x75, 0xf1, 0x52, 0x96, 0x0d, 0x88, 0xa1, 0x81, 0x3d, 0xa1, 0xc7,
	0xef, 0x75, 0xe3, 0x9b, 0x25, 0x2c, 0x4a, 0x55, 0x6f, 0xa2, 0xf1, 0xff, 0x7c, 0xa0, 0x77, 0x3c,
	0x57, 0xf5, 0x26, 0xfd, 0x40, 0x68, 0x88, 0xf8, 0xce, 0xe8, 0xda, 0x01, 0xbb, 0x49, 0x47, 0x2a,
	0x47, 0xfa, 0x40, 0x8c, 0x54, 0xfe, 0x3d, 0xcf, 0x68, 0x90, 0x27, 0xf9, 0x1d, 0xfa, 0xe8, 0x67,
	0xac, 0x39, 0x9d, 0x60, 0xc2, 0x9e, 0xe7, 0x9c, 0xff, 0xfd, 0x74, 0x7c, 0xd6, 0x0e, 0xef, 0x19,
	0x44, 0xe7, 0x4d, 0x4f, 0x29, 0x1d, 0x2c, 0xf6, 0x17, 0xb0, 0xf4, 0x11, 0x72, 0xbb, 0xfd, 0xf3,
	0x1d, 0x7a, 0xa0, 0xd7, 0xeb, 0xf6, 0x97, 0xed, 0xc8, 0x58, 0xf4, 0x8a, 0xdd, 0xa6, 0x93, 0x52,
	0x55, 0xca, 0x63, 0x80, 0xb1, 0xe8, 0x44, 0xfa, 0x91, 0xd0, 0xe3, 0xce, 0xdd, 0xc7, 0x9e, 0xd1,
	0x89, 0xf2, 0x50, 0xb9, 0x88, 0x24, 0xc1, 0x34, 0xbc, 0x7c, 0xf0, 0x4f, 0x60, 0x3b, 0xc0, 0x45,
	0x27, 0x3b, 0xa3, 0xa1, 0xd7, 0x5e, 0x96, 0x8b, 0x95, 0x6e, 0x6a, 0xdf, 0x1f, 0x9a, 0x62, 0x6b,
	0xde, 0x76, 0x5a, 0x94, 0xee, 0x29, 0xc0, 0xa7, 0x4e, 0xb4, 0x0b, 0x36, 0x16, 0xb6, 0xb8, 0xa9,
	0x43, 0x81, 0x35, 0x2e, 0x1d, 0xde, 0xf9, 0x68, 0xd2, 0xf5, 0xda, 0xfa, 0xe9, 0xfd, 0xab, 0x5d,
	0x4c, 0xbe, 0xec, 0x62, 0xf2, 0x75, 0x17, 0x93, 0x4f, 0xd7, 0x31, 0xb9, 0xba, 0x8e, 0xc9, 0xab,
	0x70, 0x00, 0xb5, 0x3c, 0xc0, 0x73, 0x3f, 0xfc, 0x16, 0x00, 0x00, 0xff, 0xff, 0x45, 0x4a, 0x63,
	0x86, 0x48, 0x03, 0x00, 0x00,
}

func (m *CreateArtRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateArtRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintArts(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.AssetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintArts(dAtA, i, uint64(m.AssetId))
	}
	if m.Description != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintArts(dAtA, i, uint64(m.Description.Size()))
		n1, err1 := m.Description.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.YoutubeLink != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintArts(dAtA, i, uint64(m.YoutubeLink.Size()))
		n2, err2 := m.YoutubeLink.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ArtResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArtResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintArts(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintArts(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintArts(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.Asset != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintArts(dAtA, i, uint64(m.Asset.Size()))
		n3, err3 := m.Asset.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ArtRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArtRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintArts(dAtA, i, uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ArtsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArtsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintArts(dAtA, i, uint64(m.Offset))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintArts(dAtA, i, uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ArtsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArtsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintArts(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TotalCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintArts(dAtA, i, uint64(m.TotalCount))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintArts(dAtA, i, uint64(m.Count))
	}
	if m.Prev {
		dAtA[i] = 0x20
		i++
		if m.Prev {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Next {
		dAtA[i] = 0x28
		i++
		if m.Next {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintArts(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateArtRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovArts(uint64(l))
	}
	if m.AssetId != 0 {
		n += 1 + sovArts(uint64(m.AssetId))
	}
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovArts(uint64(l))
	}
	if m.YoutubeLink != nil {
		l = m.YoutubeLink.Size()
		n += 1 + l + sovArts(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArtResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovArts(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovArts(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovArts(uint64(l))
	}
	if m.Asset != nil {
		l = m.Asset.Size()
		n += 1 + l + sovArts(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArtRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovArts(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArtsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovArts(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovArts(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArtsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovArts(uint64(l))
		}
	}
	if m.TotalCount != 0 {
		n += 1 + sovArts(uint64(m.TotalCount))
	}
	if m.Count != 0 {
		n += 1 + sovArts(uint64(m.Count))
	}
	if m.Prev {
		n += 2
	}
	if m.Next {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovArts(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozArts(x uint64) (n int) {
	return sovArts(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateArtRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateArtRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateArtRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &types.StringValue{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YoutubeLink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.YoutubeLink == nil {
				m.YoutubeLink = &types.StringValue{}
			}
			if err := m.YoutubeLink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArtResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArtResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArtResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Asset == nil {
				m.Asset = &AssetResponse{}
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArtRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArtRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArtRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArtsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArtsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArtsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArtsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArtsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArtsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ArtResponse{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prev", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Prev = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Next = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipArts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArts(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArts
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthArts
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthArts
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowArts
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipArts(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthArts
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthArts = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArts   = fmt.Errorf("proto: integer overflow")
)
